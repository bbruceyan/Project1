import numpy as np
import cv2
import time
import serial

#constants
cYStep = "0006"
cXStep = "0006"

#functions
def isPositive(frame, x, b): 
	if(b == 0):
		return str(int(x<(frame.shape[b]/2)))
	return str(int(x>(frame.shape[b]/2)))

def getAccel(frame, x, y, scale): # gets a value from 0-scale based on the distance from the center of the frame
	cx = int(2*abs(x-frame.shape[1]/2)/frame.shape[1] * scale)
	cy = int(2*abs(y-frame.shape[0]/2)/frame.shape[0] * scale)
	if(cx < (scale/5)):
		return ("0000", str(cy).zfill(4))
	if(cy < (scale/4)):
		return (str(cx).zfill(4), "0000")
	return (str(cx).zfill(4), str(cy).zfill(4))


#init
cap = cv2.VideoCapture(0)

#first mask (lower)
mask0_low = np.array([0,100,70])
mask0_high = np.array([10,255,255])

#second mask (upper)
mask1_low = np.array([170,50,50])
mask1_high = np.array([180,255,255])

#serial
ser = serial.Serial('COM3', 9600)

while(True):
	#read frame
	ret, frame = cap.read()

	#change to HSV
	hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

	#build mask
	mask0 = cv2.inRange(hsv, mask0_low, mask0_high)
	mask1 = cv2.inRange(hsv, mask1_low, mask1_high)
	mask = mask0 + mask1

	#apply mask to frame
	masked = cv2.bitwise_and(frame, frame, mask=mask)

	#calculate centre
	gray = cv2.cvtColor(masked, cv2.COLOR_BGR2GRAY)
	gray = cv2.bitwise_not(gray)
	ret, thresh = cv2.threshold(gray, 230, 255, 0)
	thresh = cv2.bitwise_not(thresh)
	M = cv2.moments(thresh)
	cX = 0
	cY = 0
	if(M["m00"]):
		cX = int(M["m10"] / M["m00"]) 
		cY = int(M["m01"] / M["m00"])

		#draw centre
		cv2.circle(frame, (cX, cY), 5, (255, 255, 255), -1)

	#apply motion
	(CXAccel, CYAccel) = getAccel(frame, cX, cY, 100)
	
	#x axis
	if(int(CXAccel) > 0):
		build = "0" + str(isPositive(frame, cX, 1)) + cXStep + CXAccel
		print(build)
		ser.write(build.encode())
	
	#y axis
	if(int(CYAccel) > 0):
		build = "1" + str(isPositive(frame, cY, 0)) + cYStep + CYAccel
		#print(build)
		#ser.write(build.encode())
	


	#display image
	cv2.imshow('frame', frame)
	cv2.imshow('mask', thresh)
	cv2.imshow('masked', masked)

	#press q to quit
	if cv2.waitKey(1) & 0xFF == ord('q'):
		break
		
	#time.sleep(1/25)

#destroy objects
cap.release()
cv2.destroyAllWindows()

	#make image smaller
	#scale = 100
	#width = int(frame.shape[1] * scale / 100)
	#height = int(frame.shape[0] * scale / 100)
	#dim = (width, height)
	#frame = cv2.resize(frame, dim, interpolation = cv2.INTER_AREA)
